{
  "fileName": "D:/react-uwp/src/Slider/index.tsx",
  "name": "\"D:/react-uwp/src/Slider/index\"",
  "exports": [
    {
      "name": "DataProps",
      "documentation": ""
    },
    {
      "name": "SliderProps",
      "documentation": ""
    },
    {
      "name": "SliderState",
      "documentation": ""
    },
    {
      "name": "Slider",
      "documentation": ""
    },
    {
      "name": "default",
      "documentation": "",
      "extends": [
        "Slider"
      ]
    }
  ],
  "members": [
    {
      "name": "DataProps",
      "members": [
        {
          "name": "minValue",
          "documentation": "Set the Slider minValue.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "maxValue",
          "documentation": "Set the Slider maxValue.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "initValue",
          "documentation": "Set the Slider initValue.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "numberToFixed",
          "documentation": "Set `value.toFixed(numberToFixed)`.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "unit",
          "documentation": "Set value info add `unit`.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "showValueInfo",
          "documentation": "Toggle show value info.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "transition",
          "documentation": "Set transition to all Slider Element.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "onChangeValue",
          "documentation": "onChangeValue callback.",
          "isRequired": false,
          "type": "(value?: number) => void"
        },
        {
          "name": "onChangeValueRatio",
          "documentation": "onChangeValueRatio callback.",
          "isRequired": false,
          "type": "(valueRatio?: number) => void"
        },
        {
          "name": "barHeight",
          "documentation": "Set custom Slider bar Hight.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "barBackground",
          "documentation": "Set custom Slider bar background.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "barBackgroundImage",
          "documentation": "Set custom Slider bar backgroundImage.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "customControllerStyle",
          "documentation": "Set custom Slider controllerStyle.",
          "isRequired": false,
          "type": "CSSProperties"
        },
        {
          "name": "controllerWidth",
          "documentation": "Set custom Slider controller width.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "useSimpleController",
          "documentation": "Set custom Slider controller without animation.",
          "isRequired": false,
          "type": "boolean"
        }
      ],
      "documentation": ""
    },
    {
      "name": "SliderProps",
      "documentation": "",
      "extends": [
        "DataProps",
        "HTMLAttributes"
      ]
    },
    {
      "name": "SliderState",
      "members": [
        {
          "name": "currValue",
          "documentation": "",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "valueRatio",
          "documentation": "",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "hovered",
          "documentation": "",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "dragging",
          "documentation": "",
          "isRequired": false,
          "type": "boolean"
        }
      ],
      "documentation": ""
    },
    {
      "documentation": "",
      "name": "emptyFunc",
      "type": "() => void",
      "initializerText": " () => {}"
    },
    {
      "name": "emptyFunc",
      "documentation": "",
      "type": "() => void"
    },
    {
      "name": "Slider",
      "exports": [
        {
          "name": "prototype",
          "documentation": "",
          "type": "prototype"
        },
        {
          "name": "defaultProps",
          "initializerText": " {\n    minValue: 0,\n    maxValue: 1,\n    initValue: 0,\n    onChangeValue: emptyFunc,\n    onChangeValueRatio: emptyFunc,\n    height: 24,\n    barHeight: 2,\n    controllerWidth: 8,\n    showValueInfo: false,\n    numberToFixed: 0,\n    unit: \"\",\n    transition: \"all 0.25s\"\n  }",
          "documentation": "",
          "type": "SliderProps"
        },
        {
          "name": "contextTypes",
          "initializerText": " { theme: PropTypes.object }",
          "documentation": "",
          "type": "{ theme: Requireable<any>; }"
        }
      ],
      "members": [
        {
          "name": "originBodyStyle",
          "initializerText": " { ...document.body.style }",
          "documentation": "",
          "type": "{ [index: number]: string; alignContent: string; alignItems: string; alignSelf: string; alignment..."
        },
        {
          "name": "state",
          "initializerText": " {\n    currValue: this.props.initValue,\n    valueRatio: this.props.initValue / (this.props.maxValue - this.props.minValue)\n  }",
          "documentation": "",
          "type": "SliderState"
        },
        {
          "name": "rootElm",
          "documentation": "",
          "type": "HTMLDivElement"
        },
        {
          "name": "labelElm",
          "documentation": "",
          "type": "HTMLSpanElement"
        },
        {
          "name": "controllerWrapperElm",
          "documentation": "",
          "type": "HTMLDivElement"
        },
        {
          "name": "controllerElm",
          "documentation": "",
          "type": "HTMLDivElement"
        },
        {
          "name": "barElm",
          "documentation": "",
          "type": "HTMLDivElement"
        },
        {
          "name": "componentWillReceiveProps",
          "documentation": "",
          "type": "(nextProps: SliderProps) => void"
        },
        {
          "name": "context",
          "documentation": "",
          "type": "{ theme: any; }"
        },
        {
          "name": "handelMouseEnter",
          "initializerText": " (e: React.MouseEvent<HTMLDivElement>) => {\n    this.setState({ hovered: true });\n  }",
          "documentation": "",
          "type": "(e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "name": "handelMouseLeave",
          "initializerText": " (e: React.MouseEvent<HTMLDivElement>) => {\n    this.setState({ hovered: false });\n  }",
          "documentation": "",
          "type": "(e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "name": "handelOnClick",
          "initializerText": " (e: React.MouseEvent<HTMLDivElement>) => {\n    this.setValueByEvent(e);\n  }",
          "documentation": "",
          "type": "(e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "name": "handelMouseDown",
          "initializerText": " (e: React.MouseEvent<HTMLDivElement>) => {\n    Object.assign(document.body.style, {\n      userSelect: \"none\",\n      msUserSelect: \"none\",\n      webkitUserSelect: \"none\",\n      cursor: \"default\"\n    });\n    window.addEventListener(\"mousemove\", this.setValueByEvent);\n    window.addEventListener(\"mouseup\", this.handelMouseUp);\n    this.setValueByEvent(e);\n  }",
          "documentation": "",
          "type": "(e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "name": "handelMouseUp",
          "initializerText": " (e: any) => {\n    Object.assign(document.body.style, {\n      userSelect: void 0,\n      msUserSelect: void 0,\n      webkitUserSelect: void 0,\n      cursor: void 0,\n      ...this.originBodyStyle\n    });\n    this.setState({ dragging: false });\n    window.removeEventListener(\"mousemove\", this.setValueByEvent);\n    window.removeEventListener(\"mouseup\", this.handelMouseUp);\n  }",
          "documentation": "",
          "type": "(e: any) => void"
        },
        {
          "name": "setValueByEvent",
          "initializerText": " (e: any, type?: any) => {\n    if (e.type === \"mousemove\" && !this.state.dragging) {\n      this.setState({ dragging: true });\n    }\n    const {\n      maxValue,\n      minValue,\n      barBackground,\n      barBackgroundImage,\n      label,\n      numberToFixed,\n      unit\n    } = this.props;\n    const useCustomBackground = barBackground || barBackgroundImage;\n    const { left, width } = this.rootElm.getBoundingClientRect();\n    const mouseLeft = e.clientX;\n    const controllerWidth = this.controllerElm.getBoundingClientRect().width;\n    let valueRatio = (mouseLeft - left) / (width - controllerWidth);\n    valueRatio = valueRatio < 0 ? 0 : (valueRatio > 1 ? 1 : valueRatio);\n    const currValue = minValue + (maxValue - minValue) * valueRatio;\n    this.state.currValue = currValue;\n    this.state.valueRatio = valueRatio;\n\n    if (!useCustomBackground) {\n      const barTransform = `translateX(${(valueRatio - 1) * 100}%)`;\n      Object.assign(this.barElm.style, {\n        transform: barTransform,\n        webKitTransform: barTransform,\n        msTransform: barTransform,\n        mozTransform: barTransform\n      } as React.CSSProperties);\n    }\n\n    const transform = `translateX(${valueRatio * 100}%)`;\n    Object.assign(this.controllerWrapperElm.style, {\n      transform,\n      webKitTransform: transform,\n      msTransform: transform,\n      mozTransform: transform\n    } as React.CSSProperties);\n\n    this.labelElm.innerText = `${currValue.toFixed(numberToFixed)}${unit}`;\n\n    this.props.onChangeValue(currValue);\n  }",
          "documentation": "",
          "type": "(e: any, type?: any) => void"
        },
        {
          "name": "render",
          "documentation": "",
          "type": "() => Element"
        }
      ],
      "documentation": "",
      "extends": [
        "Component"
      ]
    },
    {
      "name": "getStyles",
      "documentation": "",
      "type": "(slider: Slider) => { wrapper?: CSSProperties; root?: CSSProperties; barContainer?: CSSProperties..."
    }
  ],
  "documentation": "",
  "type": "typeof \"D:/react-uwp/src/Slider/index\""
}