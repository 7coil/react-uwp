{
  "fileName": "D:/electron-app-dev/src/react-uwp/src/controls/CommandBar/index.tsx",
  "name": "\"D:/electron-app-dev/src/react-uwp/src/controls/CommandBar/index\"",
  "exports": [
    {
      "name": "DataProps",
      "documentation": ""
    },
    {
      "name": "CommandBarProps",
      "documentation": ""
    },
    {
      "name": "CommandBarState",
      "documentation": ""
    },
    {
      "name": "CommandBar",
      "documentation": ""
    },
    {
      "name": "default",
      "documentation": "",
      "extends": [
        "CommandBar"
      ]
    }
  ],
  "members": [
    {
      "name": "DataProps",
      "members": [
        {
          "name": "contentStyle",
          "documentation": "Root Container Style.",
          "isRequired": false,
          "type": "CSSProperties"
        },
        {
          "name": "contentNode",
          "documentation": "CommandBar title node, if just string, can use `content`.",
          "isRequired": false,
          "type": "ReactNode"
        },
        {
          "name": "primaryCommands",
          "documentation": "`Commands`, if item `type` is not `AppBarButton` or `AppBarButton`, will not render that item.",
          "isRequired": false,
          "type": "ReactElement<any>[]"
        },
        {
          "name": "secondaryCommands",
          "documentation": "",
          "isRequired": false,
          "type": "ReactElement<any>[]"
        },
        {
          "name": "labelPosition",
          "documentation": "control `AppBarButton` label position.",
          "isRequired": false,
          "type": "\"right\" | \"bottom\" | \"collapsed\""
        },
        {
          "name": "opened",
          "documentation": "if using `labelPosition` \"bottom\", this will control default open status.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "flowDirection",
          "documentation": "",
          "isRequired": false,
          "type": "\"row-reverse\" | \"row\""
        }
      ],
      "documentation": ""
    },
    {
      "name": "CommandBarProps",
      "documentation": "",
      "extends": [
        "DataProps",
        "HTMLAttributes"
      ]
    },
    {
      "name": "CommandBarState",
      "members": [
        {
          "name": "opened",
          "documentation": "",
          "isRequired": false,
          "type": "boolean"
        }
      ],
      "documentation": ""
    },
    {
      "name": "CommandBar",
      "exports": [
        {
          "name": "prototype",
          "documentation": "",
          "type": "prototype"
        },
        {
          "name": "defaultProps",
          "initializerText": " {\n    content: void 0,\n    flowDirection: \"row\",\n    labelPosition: \"bottom\"\n  }",
          "documentation": "",
          "type": "CommandBarProps"
        },
        {
          "name": "contextTypes",
          "initializerText": " { theme: React.PropTypes.object }",
          "documentation": "",
          "type": "{ theme: Requireable<any>; }"
        }
      ],
      "members": [
        {
          "name": "state",
          "initializerText": " {\n    opened: this.props.opened\n  }",
          "documentation": "",
          "type": "CommandBarState"
        },
        {
          "name": "context",
          "documentation": "",
          "type": "{ theme: ThemeType; }"
        },
        {
          "name": "componentWillReceiveProps",
          "documentation": "",
          "type": "(nextProps: CommandBarProps) => void"
        },
        {
          "name": "toggleOpened",
          "initializerText": " (opened?: any) => {\n    if (typeof opened === \"boolean\") {\n      if (opened !== this.state.opened) this.setState({ opened });\n    } else {\n      this.setState((prevState, prevProps) => ({ opened: !prevState.opened }));\n    }\n  }",
          "documentation": "",
          "type": "(opened?: any) => void"
        },
        {
          "name": "render",
          "documentation": "",
          "type": "() => Element"
        }
      ],
      "documentation": "",
      "extends": [
        "Component"
      ]
    },
    {
      "name": "getStyles",
      "documentation": "",
      "type": "(commandBar: CommandBar) => { root?: CSSProperties; content?: CSSProperties; commands?: CSSProper..."
    }
  ],
  "documentation": "",
  "type": "typeof \"D:/electron-app-dev/src/react-uwp/src/controls/CommandBar/index\""
}