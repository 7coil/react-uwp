{
  "fileName": "D:/react-uwp/src/ColorPicker/index.tsx",
  "name": "\"D:/react-uwp/src/ColorPicker/index\"",
  "exports": [
    {
      "name": "DataProps",
      "documentation": ""
    },
    {
      "name": "ColorPickerProps",
      "documentation": ""
    },
    {
      "name": "ColorPickerState",
      "documentation": ""
    },
    {
      "name": "ColorPicker",
      "documentation": ""
    },
    {
      "name": "default",
      "documentation": "",
      "extends": [
        "ColorPicker"
      ]
    }
  ],
  "members": [
    {
      "name": "DataProps",
      "members": [
        {
          "name": "defaultColor",
          "documentation": "init ColorPicker Default color.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "size",
          "documentation": "init ColorPicker Default size. passed number covert to `px`.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "onChangeColor",
          "documentation": "onChange ColorPicker color event `callback`.",
          "isRequired": false,
          "type": "(color?: string) => void"
        },
        {
          "name": "onChangedColor",
          "documentation": "onChanged color event `callback`.",
          "isRequired": false,
          "type": "(color?: string) => void"
        },
        {
          "name": "onChangedColorTimeout",
          "documentation": "setTimeout to onChanged color event `callback`. default is 0.",
          "isRequired": false,
          "type": "number"
        }
      ],
      "documentation": ""
    },
    {
      "name": "ColorPickerProps",
      "documentation": "",
      "extends": [
        "DataProps",
        "HTMLAttributes"
      ]
    },
    {
      "name": "ColorPickerState",
      "members": [
        {
          "name": "h",
          "documentation": "",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "s",
          "documentation": "",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "v",
          "documentation": "",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "dragging",
          "documentation": "",
          "isRequired": false,
          "type": "boolean"
        }
      ],
      "documentation": ""
    },
    {
      "documentation": "",
      "name": "emptyFunc",
      "type": "() => void",
      "initializerText": " () => {}"
    },
    {
      "name": "emptyFunc",
      "documentation": "",
      "type": "() => void"
    },
    {
      "name": "ColorPicker",
      "exports": [
        {
          "name": "prototype",
          "documentation": "",
          "type": "prototype"
        },
        {
          "name": "defaultProps",
          "initializerText": " {\n    size: 336,\n    defaultColor: \"hsv(210, 100%, 100%)\",\n    onChangeColor: emptyFunc,\n    onChangedColor: emptyFunc,\n    onChangedColorTimeout: 250\n  }",
          "documentation": "",
          "type": "ColorPickerProps"
        },
        {
          "name": "contextTypes",
          "initializerText": " { theme: PropTypes.object }",
          "documentation": "",
          "type": "{ theme: Requireable<any>; }"
        }
      ],
      "members": [
        {
          "name": "state",
          "initializerText": " tinycolor(this.props.defaultColor).toHsv()",
          "documentation": "",
          "type": "ColorPickerState"
        },
        {
          "name": "context",
          "documentation": "",
          "type": "{ theme: any; }"
        },
        {
          "name": "canvas",
          "documentation": "",
          "type": "HTMLCanvasElement"
        },
        {
          "name": "ctx",
          "documentation": "",
          "type": "CanvasRenderingContext2D"
        },
        {
          "name": "moveColorTimer",
          "initializerText": " null",
          "documentation": "",
          "type": "any"
        },
        {
          "name": "originBodyStyle",
          "initializerText": " IS_NODE_ENV ? void 0 : { ...document.body.style }",
          "documentation": "",
          "type": "{ [index: number]: string; alignContent: string; alignItems: string; alignmentBaseline: string; a..."
        },
        {
          "name": "colorSelectorElm",
          "documentation": "",
          "type": "HTMLDivElement"
        },
        {
          "name": "colorMainBarElm",
          "documentation": "",
          "type": "HTMLDivElement"
        },
        {
          "name": "componentDidMount",
          "documentation": "",
          "type": "() => void"
        },
        {
          "name": "componentDidUpdate",
          "documentation": "",
          "type": "() => void"
        },
        {
          "name": "componentWillUnmount",
          "documentation": "",
          "type": "() => void"
        },
        {
          "name": "renderCanvas",
          "documentation": "",
          "type": "() => void"
        },
        {
          "name": "setCanvas2devicePixelRatio",
          "initializerText": " () => {\n    const { devicePixelRatio } = window;\n    const { canvas, ctx } = this;\n\n    if (!devicePixelRatio) return;\n\n    const { width, height } = canvas;\n\n    Object.assign(canvas, {\n      width: width * devicePixelRatio,\n      height: height * devicePixelRatio\n    } as HTMLCanvasElement);\n\n    Object.assign(canvas.style, {\n      width: `${width}px`,\n      height: `${height}px`\n    } as CSSStyleDeclaration);\n\n    ctx.scale(devicePixelRatio, devicePixelRatio);\n  }",
          "documentation": "",
          "type": "() => void"
        },
        {
          "name": "handleColorBarChange",
          "initializerText": " (v: number) => {\n    const { h, s } = this.state;\n    const { onChangeColor, onChangedColor } = this.props;\n    const colorHexString = tinycolor({ h, s, v }).toHexString();\n    onChangeColor(colorHexString);\n    this.setState({ v }, () => onChangedColor(colorHexString));\n  }",
          "documentation": "",
          "type": "(v: number) => void"
        },
        {
          "name": "handleChooseColor",
          "initializerText": " (e: React.MouseEvent<HTMLCanvasElement> | React.TouchEvent<HTMLCanvasElement>, isClickEvent = true) => {\n    e.preventDefault();\n    const isTouchEvent = e.type.includes(\"touch\");\n\n    if (isClickEvent && (e.type === \"mousedown\" || e.type === \"touchstart\")) {\n      document.documentElement.addEventListener(\"mousemove\", this.handleTouchMouseMove, false);\n      document.documentElement.addEventListener(\"mouseup\", this.handleEnd);\n      this.canvas.addEventListener(\"touchmove\", this.handleTouchMouseMove, false);\n      document.documentElement.addEventListener(\"touchend\", this.handleEnd);\n      Object.assign(document.body.style, {\n        userSelect: \"none\",\n        msUserSelect: \"none\",\n        webkitUserSelect: \"none\",\n        cursor: \"default\"\n      });\n    }\n    const { size, onChangeColor, onChangedColor, onChangedColorTimeout } = this.props;\n    const { v } = this.state;\n    const clientReact = this.canvas.getBoundingClientRect();\n    const colorPickerBoardSize = size * 0.8125 / 2;\n    const { clientX, clientY } = isTouchEvent ? (e as React.TouchEvent<HTMLCanvasElement>).changedTouches[0] : (e as React.MouseEvent<HTMLCanvasElement>);\n    const x = clientX - clientReact.left - colorPickerBoardSize;\n    const y = clientReact.top - clientY + colorPickerBoardSize;\n    const r = Math.sqrt(x * x + y * y);\n    let h = Math.asin(y / r) / Math.PI * 180;\n    if (x > 0 && y > 0) h = 360 - h;\n    if (x > 0 && y < 0) h = -h;\n    if (x < 0 && y < 0) h = 180 + h;\n    if (x < 0 && y > 0) h = 180 + h;\n    let s = r / colorPickerBoardSize;\n    if (s > 1) s = 1;\n\n    const colorHexString = tinycolor({ h, s, v }).toHexString();\n    if (isClickEvent && e.type === \"click\") {\n      onChangeColor(colorHexString);\n      onChangedColor(colorHexString);\n      this.setState({ h, s });\n    } else {\n      onChangeColor(colorHexString);\n      clearTimeout(this.moveColorTimer);\n      const r = colorPickerBoardSize * s;\n      const mainBoardDotSize = size / 25;\n      const x = Math.cos(h / 180 * Math.PI) * r;\n      const y = Math.sin(h / 180 * Math.PI) * r;\n\n      Object.assign(this.colorSelectorElm.style, {\n        top: `${y}px`,\n        left: `${x}px`\n      } as CSSStyleDeclaration);\n      if (this.colorMainBarElm) {\n        this.colorMainBarElm.style.background = colorHexString;\n      }\n      this.moveColorTimer = setTimeout(() => {\n        onChangedColor(colorHexString);\n        this.setState({ h, s });\n      }, onChangedColorTimeout);\n    }\n  }",
          "documentation": "",
          "type": "(e: MouseEvent<HTMLCanvasElement> | TouchEvent<HTMLCanvasElement>, isClickEvent?: boolean) => void"
        },
        {
          "name": "handleTouchMouseMove",
          "initializerText": " (e: any) => {\n    if (!this.state.dragging) {\n      this.setState({ dragging: true });\n    }\n    this.handleChooseColor(e, false);\n  }",
          "documentation": "",
          "type": "(e: any) => void"
        },
        {
          "name": "handleEnd",
          "initializerText": " (e: any) => {\n    if (this.state.dragging) {\n      this.setState({ dragging: false });\n    }\n    clearTimeout(this.moveColorTimer);\n    Object.assign(document.body.style, {\n      userSelect: void 0,\n      msUserSelect: void 0,\n      webkitUserSelect: void 0,\n      cursor: void 0,\n      ...this.originBodyStyle\n    });\n    document.documentElement.removeEventListener(\"mousemove\", this.handleTouchMouseMove);\n    this.canvas.removeEventListener(\"touchmove\", this.handleTouchMouseMove);\n    document.documentElement.removeEventListener(\"mouseup\", this.handleEnd);\n    document.documentElement.removeEventListener(\"touchend\", this.handleEnd);\n  }",
          "documentation": "",
          "type": "(e: any) => void"
        },
        {
          "name": "render",
          "documentation": "",
          "type": "() => Element"
        }
      ],
      "documentation": "",
      "extends": [
        "Component"
      ]
    },
    {
      "name": "getStyles",
      "documentation": "",
      "type": "(colorPicker: ColorPicker) => { root?: CSSProperties; board?: CSSProperties; mainBoard?: CSSPrope..."
    }
  ],
  "documentation": "",
  "type": "typeof \"D:/react-uwp/src/ColorPicker/index\""
}