{
  "fileName": "D:/react-uwp/src/Tooltip/index.tsx",
  "name": "\"D:/react-uwp/src/Tooltip/index\"",
  "exports": [
    {
      "name": "DataProps",
      "documentation": ""
    },
    {
      "name": "TooltipProps",
      "documentation": ""
    },
    {
      "name": "TooltipState",
      "documentation": ""
    },
    {
      "name": "default",
      "documentation": ""
    }
  ],
  "members": [
    {
      "name": "DataProps",
      "members": [
        {
          "name": "verticalPosition",
          "documentation": "",
          "isRequired": false,
          "type": "\"top\" | \"bottom\" | \"center\""
        },
        {
          "name": "horizontalPosition",
          "documentation": "",
          "isRequired": false,
          "type": "\"center\" | \"left\" | \"right\""
        },
        {
          "name": "show",
          "documentation": "",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "itemHeigh",
          "documentation": "",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "margin",
          "documentation": "",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "autoClose",
          "documentation": "",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "timeout",
          "documentation": "",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "contentNode",
          "documentation": "",
          "isRequired": false,
          "type": "any"
        }
      ],
      "documentation": ""
    },
    {
      "name": "TooltipProps",
      "documentation": "",
      "extends": [
        "DataProps",
        "HTMLAttributes"
      ]
    },
    {
      "name": "TooltipState",
      "members": [
        {
          "name": "showTooltip",
          "documentation": "",
          "isRequired": false,
          "type": "boolean"
        }
      ],
      "documentation": ""
    },
    {
      "name": "default",
      "exports": [
        {
          "name": "prototype",
          "documentation": "",
          "type": "prototype"
        },
        {
          "name": "defaultProps",
          "initializerText": " {\r\n    verticalPosition: \"top\",\r\n    horizontalPosition: \"center\",\r\n    margin: 4,\r\n    autoClose: false,\r\n    timeout: 0\r\n  }",
          "documentation": "",
          "type": "TooltipProps"
        },
        {
          "name": "contextTypes",
          "initializerText": " { theme: PropTypes.object }",
          "documentation": "",
          "type": "{ theme: Requireable<any>; }"
        }
      ],
      "members": [
        {
          "name": "state",
          "initializerText": " {\r\n    showTooltip: false\r\n  }",
          "documentation": "",
          "type": "TooltipState"
        },
        {
          "name": "refs",
          "documentation": "",
          "type": "{ rootElm: HTMLDivElement; tooltipElm: HTMLSpanElement; }"
        },
        {
          "name": "timer",
          "initializerText": " null",
          "documentation": "",
          "type": "any"
        },
        {
          "name": "unShowTimer",
          "initializerText": " null",
          "documentation": "",
          "type": "any"
        },
        {
          "name": "context",
          "documentation": "",
          "type": "{ theme: any; }"
        },
        {
          "name": "componentWillUnmount",
          "documentation": "",
          "type": "() => void"
        },
        {
          "name": "showTooltip",
          "initializerText": " (e: React.MouseEvent<HTMLDivElement>) => {\r\n    clearTimeout(this.unShowTimer);\r\n    const show = () => {\r\n      this.setState({\r\n        showTooltip: true\r\n      });\r\n    };\r\n    if (this.props.autoClose) {\r\n      show();\r\n      this.timer = setTimeout(() => {\r\n        this.setState({\r\n          showTooltip: false\r\n        });\r\n      }, this.props.timeout);\r\n    } else {\r\n      show();\r\n    }\r\n  }",
          "documentation": "",
          "type": "(e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "name": "notShowTooltip",
          "initializerText": " (e: React.MouseEvent<HTMLDivElement>) => {\r\n    this.unShowTimer = setTimeout(() => {\r\n      this.setState({\r\n        showTooltip: false\r\n      });\r\n      clearTimeout(this.unShowTimer);\r\n    }, 500);\r\n  }",
          "documentation": "",
          "type": "(e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "name": "getStyle",
          "initializerText": " (showTooltip = false, positionStyle = {}): React.CSSProperties =>  {\r\n    const { context: { theme }, props: { style } } = this;\r\n    return theme.prepareStyles({\r\n      height: 28,\r\n      overflow: \"hidden\",\r\n      textOverflow: \"ellipsis\",\r\n      whiteSpace: \"nowrap\",\r\n      padding: \"4px 8px\",\r\n      transition: \"all .25s 0s ease-in-out\",\r\n      border: `1px solid ${theme.baseLow}`,\r\n      color: theme.baseMediumHigh,\r\n      background: theme.chromeMedium,\r\n      opacity: showTooltip ? 1 : 0,\r\n      transform: `translateY(${showTooltip ? \"0px\" : \"10px\"})`,\r\n      position: \"absolute\",\r\n      fontSize: 14,\r\n      pointerEvents: showTooltip ? \"all\" : \"none\",\r\n      zIndex: theme.zIndex.tooltip,\r\n      ...style,\r\n      ...positionStyle\r\n    });\r\n  }",
          "documentation": "",
          "type": "(showTooltip?: boolean, positionStyle?: {}) => CSSProperties"
        },
        {
          "name": "getTooltipStyle",
          "initializerText": " (): React.CSSProperties => {\r\n    const { rootElm, tooltipElm } = this.refs;\r\n    if (!(rootElm && tooltipElm)) return this.getStyle();\r\n\r\n    const { theme } = this.context;\r\n    const { verticalPosition, horizontalPosition, margin } = this.props;\r\n    const { width, height } = rootElm.getBoundingClientRect();\r\n    const containerWidth = tooltipElm.getBoundingClientRect().width;\r\n    const containerHeight = tooltipElm.getBoundingClientRect().height;\r\n    const { showTooltip } = this.state;\r\n    const positionStyle: React.CSSProperties = {};\r\n    if (width !== void(0) && height !== void(0)) {\r\n      switch (horizontalPosition) {\r\n        case \"left\": {\r\n          positionStyle.right = 0;\r\n          break;\r\n        }\r\n        case \"center\": {\r\n          positionStyle.left = (width - containerWidth) / 2;\r\n          break;\r\n        }\r\n        case \"right\": {\r\n          positionStyle.left = 0;\r\n          break;\r\n        }\r\n        default: {\r\n          break;\r\n        }\r\n      }\r\n      switch (verticalPosition) {\r\n        case \"top\": {\r\n          positionStyle.top = -containerHeight - margin;\r\n          break;\r\n        }\r\n        case \"center\": {\r\n          positionStyle.top = (height - containerHeight) / 2;\r\n          break;\r\n        }\r\n        case \"bottom\": {\r\n          positionStyle.top = height + margin;\r\n          break;\r\n        }\r\n        default: {\r\n          break;\r\n        }\r\n      }\r\n    };\r\n    return this.getStyle(showTooltip, positionStyle);\r\n  }",
          "documentation": "",
          "type": "() => CSSProperties"
        },
        {
          "name": "render",
          "documentation": "",
          "type": "() => Element"
        }
      ],
      "documentation": "",
      "extends": [
        "Component"
      ]
    }
  ],
  "documentation": "",
  "type": "typeof \"D:/react-uwp/src/Tooltip/index\""
}