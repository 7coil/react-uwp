{
  "fileName": "D:/react-uwp/src/Tooltip/index.tsx",
  "name": "\"D:/react-uwp/src/Tooltip/index\"",
  "exports": [
    {
      "name": "DataProps",
      "documentation": ""
    },
    {
      "name": "TooltipProps",
      "documentation": ""
    },
    {
      "name": "TooltipState",
      "documentation": ""
    },
    {
      "name": "Tooltip",
      "documentation": ""
    },
    {
      "name": "default",
      "documentation": "",
      "extends": [
        "Tooltip"
      ]
    }
  ],
  "members": [
    {
      "name": "DataProps",
      "members": [
        {
          "name": "content",
          "documentation": "Set Tooltip content.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "contentNode",
          "documentation": "Set ReactNode to replace content.",
          "isRequired": false,
          "type": "ReactNode"
        },
        {
          "name": "verticalPosition",
          "documentation": "Set Tooltip custom vertical position.",
          "isRequired": false,
          "type": "\"top\" | \"bottom\" | \"center\""
        },
        {
          "name": "horizontalPosition",
          "documentation": "Set Tooltip custom horizontal position.",
          "isRequired": false,
          "type": "\"center\" | \"left\" | \"right\""
        },
        {
          "name": "margin",
          "documentation": "Set Tooltip custom margin from `rootElm` (px).",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "autoClose",
          "documentation": "Set Tooltip auto close in showed some time.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "autoCloseTimeout",
          "documentation": "Set Tooltip auto close time (ms).",
          "isRequired": false,
          "type": "number"
        }
      ],
      "documentation": ""
    },
    {
      "name": "TooltipProps",
      "documentation": "",
      "extends": [
        "DataProps",
        "HTMLAttributes"
      ]
    },
    {
      "name": "TooltipState",
      "members": [
        {
          "name": "showTooltip",
          "documentation": "",
          "isRequired": false,
          "type": "boolean"
        }
      ],
      "documentation": ""
    },
    {
      "name": "Tooltip",
      "exports": [
        {
          "name": "prototype",
          "documentation": "",
          "type": "prototype"
        },
        {
          "name": "defaultProps",
          "initializerText": " {\n    verticalPosition: \"top\",\n    horizontalPosition: \"center\",\n    margin: 4,\n    autoClose: false,\n    autoCloseTimeout: 750\n  }",
          "documentation": "",
          "type": "TooltipProps"
        },
        {
          "name": "contextTypes",
          "initializerText": " { theme: PropTypes.object }",
          "documentation": "",
          "type": "{ theme: Requireable<any>; }"
        }
      ],
      "members": [
        {
          "name": "state",
          "initializerText": " {\n    showTooltip: false\n  }",
          "documentation": "",
          "type": "TooltipState"
        },
        {
          "name": "refs",
          "documentation": "",
          "type": "{ rootElm: HTMLDivElement; tooltipElm: HTMLSpanElement; }"
        },
        {
          "name": "timer",
          "initializerText": " null",
          "documentation": "",
          "type": "any"
        },
        {
          "name": "unShowTimer",
          "initializerText": " null",
          "documentation": "",
          "type": "any"
        },
        {
          "name": "context",
          "documentation": "",
          "type": "{ theme: any; }"
        },
        {
          "name": "componentWillUnmount",
          "documentation": "",
          "type": "() => void"
        },
        {
          "name": "showTooltip",
          "initializerText": " (e: React.MouseEvent<HTMLDivElement>) => {\n    clearTimeout(this.unShowTimer);\n    const show = () => {\n      this.setState({\n        showTooltip: true\n      });\n    };\n    if (this.props.autoClose) {\n      show();\n      this.timer = setTimeout(() => {\n        this.setState({\n          showTooltip: false\n        });\n      }, this.props.autoCloseTimeout);\n    } else {\n      show();\n    }\n  }",
          "documentation": "",
          "type": "(e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "name": "notShowTooltip",
          "initializerText": " (e: React.MouseEvent<HTMLDivElement>) => {\n    this.unShowTimer = setTimeout(() => {\n      this.setState({\n        showTooltip: false\n      });\n      clearTimeout(this.unShowTimer);\n    }, 500);\n  }",
          "documentation": "",
          "type": "(e: MouseEvent<HTMLDivElement>) => void"
        },
        {
          "name": "getStyle",
          "initializerText": " (showTooltip = false, positionStyle = {}): React.CSSProperties =>  {\n    const { context: { theme }, props: { style } } = this;\n    return theme.prepareStyles({\n      height: 28,\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      whiteSpace: \"nowrap\",\n      padding: \"4px 8px\",\n      transition: \"all .25s 0s ease-in-out\",\n      border: `1px solid ${theme.baseLow}`,\n      color: theme.baseMediumHigh,\n      background: theme.chromeMedium,\n      opacity: showTooltip ? 1 : 0,\n      transform: `translateY(${showTooltip ? \"0px\" : \"10px\"})`,\n      position: \"absolute\",\n      fontSize: 14,\n      pointerEvents: showTooltip ? \"all\" : \"none\",\n      zIndex: theme.zIndex.tooltip,\n      ...style,\n      ...positionStyle\n    });\n  }",
          "documentation": "",
          "type": "(showTooltip?: boolean, positionStyle?: {}) => CSSProperties"
        },
        {
          "name": "getTooltipStyle",
          "initializerText": " (): React.CSSProperties => {\n    const { rootElm, tooltipElm } = this.refs;\n    if (!(rootElm && tooltipElm)) return this.getStyle();\n\n    const { theme } = this.context;\n    const { verticalPosition, horizontalPosition, margin } = this.props;\n    const { width, height } = rootElm.getBoundingClientRect();\n    const containerWidth = tooltipElm.getBoundingClientRect().width;\n    const containerHeight = tooltipElm.getBoundingClientRect().height;\n    const { showTooltip } = this.state;\n    const positionStyle: React.CSSProperties = {};\n    if (width !== void(0) && height !== void(0)) {\n      switch (horizontalPosition) {\n        case \"left\": {\n          positionStyle.right = 0;\n          break;\n        }\n        case \"center\": {\n          positionStyle.left = (width - containerWidth) / 2;\n          break;\n        }\n        case \"right\": {\n          positionStyle.left = 0;\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n      switch (verticalPosition) {\n        case \"top\": {\n          positionStyle.top = -containerHeight - margin;\n          break;\n        }\n        case \"center\": {\n          positionStyle.top = (height - containerHeight) / 2;\n          break;\n        }\n        case \"bottom\": {\n          positionStyle.top = height + margin;\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n    }\n    return this.getStyle(showTooltip, positionStyle);\n  }",
          "documentation": "",
          "type": "() => CSSProperties"
        },
        {
          "name": "render",
          "documentation": "",
          "type": "() => Element"
        }
      ],
      "documentation": "",
      "extends": [
        "Component"
      ]
    }
  ],
  "documentation": "",
  "type": "typeof \"D:/react-uwp/src/Tooltip/index\""
}