{
  "fileName": "D:/react-uwp/src/Theme/index.tsx",
  "name": "\"D:/react-uwp/src/Theme/index\"",
  "exports": [
    {
      "name": "getTheme"
    },
    {
      "name": "DataProps"
    },
    {
      "name": "ThemeProps"
    },
    {
      "name": "ThemeState"
    },
    {
      "name": "Theme"
    },
    {
      "name": "default",
      "extends": [
        "Theme"
      ]
    }
  ],
  "members": [
    {
      "name": "DataProps",
      "members": [
        {
          "name": "theme",
          "documentation": "Set theme object. [ThemeType](https://github.com/myxvisual/react-uwp/blob/master/typings/index.d.ts#L43), Usually use [getTheme](https://github.com/myxvisual/react-uwp/blob/master/src/styles/getTheme.ts#L28) function to get it.",
          "isRequired": false,
          "type": "any"
        },
        {
          "name": "autoSaveTheme",
          "documentation": "For simple development, autoSaveTheme can read and save theme to `localStorage`. use global context `theme.saveTheme` method to save.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "themeWillUpdate",
          "documentation": "set theme will update callback.",
          "isRequired": false,
          "type": "(theme?: any) => void"
        },
        {
          "name": "onGeneratedAcrylic",
          "documentation": "onGeneratedAcrylic callback, base acrylic textures is base64 url image, for production, you can set this callback, post image to your server, and update theme(use this callback will not auto update theme).",
          "isRequired": false,
          "type": "(theme?: any) => void"
        },
        {
          "name": "needGenerateAcrylic",
          "documentation": "for production if you have generated acrylic textures, you can disabled generation acrylic textures.",
          "isRequired": false,
          "type": "boolean"
        }
      ]
    },
    {
      "name": "ThemeProps",
      "extends": [
        "DataProps",
        "HTMLAttributes"
      ]
    },
    {
      "name": "ThemeState",
      "members": [
        {
          "name": "currTheme",
          "isRequired": false,
          "type": "any"
        }
      ]
    },
    {
      "name": "customLocalStorageName",
      "type": "\"__REACT_UWP__\"",
      "initializerText": " \"__REACT_UWP__\""
    },
    {
      "name": "customLocalStorageName",
      "type": "\"__REACT_UWP__\""
    },
    {
      "name": "baseClassName",
      "type": "\"react-uwp-theme\"",
      "initializerText": " \"react-uwp-theme\""
    },
    {
      "name": "baseClassName",
      "type": "\"react-uwp-theme\""
    },
    {
      "name": "themeCallback",
      "type": "(theme?: any) => void",
      "initializerText": " () => {}"
    },
    {
      "name": "themeCallback",
      "type": "(theme?: any) => void"
    },
    {
      "name": "Theme",
      "exports": [
        {
          "name": "prototype",
          "type": "prototype"
        },
        {
          "name": "defaultProps",
          "initializerText": " {\r\n    needGenerateAcrylic: true,\r\n    onGeneratedAcrylic: themeCallback,\r\n    themeWillUpdate: themeCallback\r\n  }",
          "type": "ThemeProps"
        },
        {
          "name": "childContextTypes",
          "initializerText": " {\r\n    theme: PropTypes.object\r\n  }",
          "type": "{ theme: Requireable<any>; }"
        }
      ],
      "members": [
        {
          "name": "acrylicTextureCount",
          "initializerText": " 0",
          "type": "number"
        },
        {
          "name": "themeClassName",
          "initializerText": " \"react-uwp-theme-dark\"",
          "type": "string"
        },
        {
          "name": "cacheDarkAcrylicTextures",
          "type": "any"
        },
        {
          "name": "cacheLightAcrylicTextures",
          "type": "any"
        },
        {
          "name": "toastWrapper",
          "type": "any"
        },
        {
          "name": "prevStyleManager",
          "initializerText": " null",
          "type": "StyleManager"
        },
        {
          "name": "getDefaultTheme",
          "initializerText": " () => {\r\n    let { theme, autoSaveTheme } = this.props;\r\n\r\n    if (!IS_NODE_ENV && autoSaveTheme && !theme) {\r\n      theme = this.getLocalStorageTheme();\r\n    } else {\r\n      theme = theme || darkTheme;\r\n    }\r\n\r\n    return theme;\r\n  }",
          "type": "() => any"
        },
        {
          "name": "getLocalStorageTheme",
          "initializerText": " () => {\r\n    let themeConfig: any = {};\r\n    let { theme } = this.props;\r\n\r\n    if (theme) {\r\n      Object.assign(themeConfig, {\r\n        themeName: theme.themeName,\r\n        accent: theme.accent,\r\n        useFluentDesign: theme.useFluentDesign,\r\n        desktopBackgroundImage: theme.desktopBackgroundImage\r\n      });\r\n    }\r\n\r\n    const storageString = localStorage.getItem(customLocalStorageName);\r\n    if (storageString) {\r\n      let data: any = {};\r\n      try {\r\n        data = JSON.parse(storageString);\r\n        const { themeName, accent, useFluentDesign, desktopBackgroundImage } = data;\r\n        theme = getTheme({\r\n          themeName: themeName === void 0 ? themeConfig.themeName : themeName,\r\n          accent: accent === void 0 ? themeConfig.accent : accent,\r\n          useFluentDesign: useFluentDesign === void 0 ? themeConfig.useFluentDesign : useFluentDesign,\r\n          desktopBackgroundImage: desktopBackgroundImage === void 0 ? themeConfig.desktopBackgroundImage : desktopBackgroundImage\r\n        });\r\n      } catch (error) {\r\n        theme = this.props.theme || darkTheme;\r\n      }\r\n    } else {\r\n      theme = this.props.theme || darkTheme;\r\n    }\r\n\r\n    return theme;\r\n  }",
          "type": "() => any"
        },
        {
          "name": "generateAcrylicTextures",
          "initializerText": " (currTheme: ReactUWP.ThemeType, themeCallback?: (theme?: ReactUWP.ThemeType) => void) => {\r\n    const { onGeneratedAcrylic } = this.props;\r\n    this.acrylicTextureCount = 0;\r\n    const baseConfig = {\r\n      blurSize: 24,\r\n      noiseSize: 1,\r\n      noiseOpacity: 0.2\r\n    };\r\n    let backgrounds: string[] = [];\r\n\r\n    const callback = (image: string, key: number) => {\r\n      if (key === 4) {\r\n        this.acrylicTextureCount += 1;\r\n        Object.assign(currTheme.acrylicTexture40, {\r\n          tintColor: currTheme.chromeMediumLow,\r\n          tintOpacity: 0.4,\r\n          background: `url(${image}) no-repeat fixed top left / cover`,\r\n          ...baseConfig\r\n        });\r\n      }\r\n      if (key === 6) {\r\n        this.acrylicTextureCount += 1;\r\n        Object.assign(currTheme.acrylicTexture60, {\r\n          tintColor: currTheme.chromeLow,\r\n          tintOpacity: 0.6,\r\n          background: `url(${image}) no-repeat fixed top left / cover`,\r\n          ...baseConfig\r\n        });\r\n      }\r\n      if (key === 8) {\r\n        this.acrylicTextureCount += 1;\r\n        Object.assign(currTheme.acrylicTexture80, {\r\n          tintColor: currTheme.chromeLow,\r\n          tintOpacity: 0.8,\r\n          background: `url(${image}) no-repeat fixed top left / cover`,\r\n          ...baseConfig\r\n        });\r\n      }\r\n\r\n      if (this.acrylicTextureCount === 3) {\r\n        currTheme.haveAcrylicTextures = true;\r\n        onGeneratedAcrylic(currTheme);\r\n        if (themeCallback) themeCallback(currTheme);\r\n        return currTheme;\r\n      }\r\n    };\r\n\r\n    generateAcrylicTexture(\r\n      currTheme.desktopBackgroundImage,\r\n      currTheme.chromeMediumLow,\r\n      0.4,\r\n      void 0,\r\n      void 0,\r\n      void 0,\r\n      image => callback(image, 4)\r\n    );\r\n    generateAcrylicTexture(\r\n      currTheme.desktopBackgroundImage,\r\n      currTheme.chromeLow,\r\n      0.6,\r\n      void 0,\r\n      void 0,\r\n      void 0,\r\n      image => callback(image, 6)\r\n    );\r\n    generateAcrylicTexture(\r\n      currTheme.desktopBackgroundImage,\r\n      currTheme.chromeLow,\r\n      0.8,\r\n      void 0,\r\n      void 0,\r\n      void 0,\r\n      image => callback(image, 8)\r\n    );\r\n  }",
          "type": "(currTheme: any, themeCallback?: (theme?: any) => void) => void"
        },
        {
          "name": "bindNewThemeMethods",
          "initializerText": " (theme: ReactUWP.ThemeType) => {\r\n    const styleManager =  new StyleManager({ theme });\r\n    styleManager.addCSSTextWithUpdate(getBaseCSSText(theme));\r\n    Object.assign(theme, {\r\n      desktopBackground: `url(${theme.desktopBackgroundImage}) no-repeat fixed top left / cover`,\r\n      updateTheme: this.updateTheme,\r\n      saveTheme: this.saveTheme,\r\n      addToast: this.addToast,\r\n      updateToast: this.updateToast,\r\n      deleteToast: this.deleteToast,\r\n      scrollRevealListener: this.handleScrollReveal,\r\n      generateAcrylicTextures: this.generateAcrylicTextures,\r\n      forceUpdateTheme: this.forceUpdateTheme,\r\n      styleManager\r\n    } as ReactUWP.ThemeType);\r\n  }",
          "type": "(theme: any) => void"
        },
        {
          "name": "handleNewTheme",
          "initializerText": " (theme: ReactUWP.ThemeType) => {\r\n    this.props.themeWillUpdate(theme);\r\n  }",
          "type": "(theme: any) => void"
        },
        {
          "name": "state",
          "initializerText": " {\r\n    currTheme: (() => {\r\n      const theme = this.getDefaultTheme();\r\n      this.handleNewTheme(theme);\r\n      return theme;\r\n    })()\r\n  }",
          "type": "ThemeState"
        },
        {
          "name": "getChildContext",
          "type": "() => { theme: any; }"
        },
        {
          "name": "componentDidMount",
          "type": "() => void"
        },
        {
          "name": "componentWillReceiveProps",
          "type": "(nextProps: ThemeProps) => void"
        },
        {
          "name": "componentWillUpdate",
          "type": "(nextProps: ThemeProps, nextState: ThemeState) => void"
        },
        {
          "name": "componentDidUpdate",
          "type": "() => void"
        },
        {
          "name": "componentWillUnmount",
          "type": "() => void"
        },
        {
          "name": "updateTheme",
          "initializerText": " (newTheme?: ReactUWP.ThemeType, callback = themeCallback) => {\r\n    const needGenerateAcrylic = this.sureNeedGenerateAcrylic(newTheme);\r\n\r\n    this.handleNewTheme(newTheme);\r\n    this.setState({\r\n      currTheme: newTheme\r\n    }, () => {\r\n      callback(newTheme);\r\n      if (needGenerateAcrylic) {\r\n        this.handleNewTheme(newTheme);\r\n        this.generateAcrylicTextures(newTheme, currTheme => this.setState({ currTheme }));\r\n      }\r\n    });\r\n  }",
          "type": "(newTheme?: any, callback?: (theme?: any) => void) => void"
        },
        {
          "name": "forceUpdateTheme",
          "initializerText": " (currTheme: ReactUWP.ThemeType) => this.setState({ currTheme })",
          "type": "(currTheme: any) => void"
        },
        {
          "name": "saveTheme",
          "initializerText": " (newTheme?: ReactUWP.ThemeType, callback = themeCallback) => {\r\n    localStorage.setItem(customLocalStorageName, JSON.stringify({\r\n      themeName: newTheme.themeName,\r\n      accent: newTheme.accent,\r\n      useFluentDesign: newTheme.useFluentDesign,\r\n      desktopBackgroundImage: newTheme.desktopBackgroundImage\r\n    }));\r\n\r\n    const needGenerateAcrylic = this.sureNeedGenerateAcrylic(newTheme);\r\n\r\n    this.handleNewTheme(newTheme);\r\n    this.setState({\r\n      currTheme: newTheme\r\n    }, () => {\r\n      callback(newTheme);\r\n      if (needGenerateAcrylic) {\r\n        this.handleNewTheme(newTheme);\r\n        this.generateAcrylicTextures(newTheme, currTheme => this.setState({ currTheme }));\r\n      }\r\n    });\r\n  }",
          "type": "(newTheme?: any, callback?: (theme?: any) => void) => void"
        },
        {
          "name": "sureNeedGenerateAcrylic",
          "initializerText": " (newTheme: ReactUWP.ThemeType): boolean => {\r\n    const { currTheme } = this.state;\r\n    let needGenerateAcrylic = newTheme.desktopBackgroundImage && this.props.needGenerateAcrylic;\r\n\r\n    if (needGenerateAcrylic &&\r\n      newTheme.desktopBackgroundImage === currTheme.desktopBackgroundImage\r\n    ) {\r\n      if (currTheme.useFluentDesign) {\r\n        Object.assign(currTheme.isDarkTheme ? this.cacheDarkAcrylicTextures : this.cacheLightAcrylicTextures, {\r\n          acrylicTexture40: currTheme.acrylicTexture40,\r\n          acrylicTexture60: currTheme.acrylicTexture60,\r\n          acrylicTexture80: currTheme.acrylicTexture80\r\n        } as ReactUWP.ThemeType);\r\n        needGenerateAcrylic = false;\r\n      }\r\n      if (newTheme.useFluentDesign) {\r\n        if (newTheme.isDarkTheme && this.cacheDarkAcrylicTextures.acrylicTexture40 || (\r\n          !newTheme.isDarkTheme && this.cacheLightAcrylicTextures.acrylicTexture40\r\n        )) {\r\n          Object.assign(newTheme, newTheme.isDarkTheme ? this.cacheDarkAcrylicTextures : this.cacheLightAcrylicTextures);\r\n          needGenerateAcrylic = false;\r\n        } else {\r\n          needGenerateAcrylic = true;\r\n        }\r\n      } else {\r\n        needGenerateAcrylic = false;\r\n        Object.assign(newTheme, {\r\n          acrylicTexture40: currTheme.acrylicTexture40,\r\n          acrylicTexture60: currTheme.acrylicTexture60,\r\n          acrylicTexture80: currTheme.acrylicTexture80\r\n        } as ReactUWP.ThemeType);\r\n      }\r\n    }\r\n    needGenerateAcrylic = needGenerateAcrylic && newTheme.useFluentDesign && this.props.needGenerateAcrylic;\r\n    return needGenerateAcrylic;\r\n  }",
          "type": "(newTheme: any) => boolean"
        },
        {
          "name": "addToast",
          "initializerText": " (toast: React.ReactNode) => {\r\n    this.toastWrapper.addToast(toast);\r\n  }",
          "type": "(toast: ReactNode) => void"
        },
        {
          "name": "updateToast",
          "initializerText": " (toastID: number, toast: React.ReactNode) => {\r\n    this.toastWrapper && this.toastWrapper.updateToast(toastID, toast);\r\n  }",
          "type": "(toastID: number, toast: ReactNode) => void"
        },
        {
          "name": "deleteToast",
          "initializerText": " (toastID: number) => {\r\n    this.state.currTheme.toasts[toastID] = void 0;\r\n  }",
          "type": "(toastID: number) => void"
        },
        {
          "name": "handleScrollReveal",
          "initializerText": " (e?: Event) => {\r\n    const { currTheme } = this.state;\r\n    for (const scrollReveal of currTheme.scrollReveals) {\r\n      const {\r\n        rootElm,\r\n        animated,\r\n        setEnterStyle,\r\n        setLeaveStyle,\r\n        props: {\r\n          topOffset,\r\n          bottomOffset\r\n        }\r\n      } = scrollReveal;\r\n      if (!rootElm) return;\r\n      const { top, height } = rootElm.getBoundingClientRect();\r\n      const { innerHeight } = window;\r\n\r\n      let isIn = false;\r\n      if (height > innerHeight) {\r\n        isIn = top < innerHeight - height * height && top > - height * 0.5;\r\n      } else {\r\n        isIn = top > 0 + topOffset && top + height + bottomOffset < innerHeight;\r\n      }\r\n      if (isIn) {\r\n        if (!animated) {\r\n          setEnterStyle();\r\n          scrollReveal.animated = true;\r\n        }\r\n      } else {\r\n        if (animated) {\r\n          setLeaveStyle();\r\n          scrollReveal.animated = false;\r\n        }\r\n      }\r\n    }\r\n  }",
          "type": "(e?: Event) => void"
        },
        {
          "name": "cleanLocalStorage",
          "initializerText": " () => {\r\n    localStorage.setItem(customLocalStorageName, \"\");\r\n  }",
          "type": "() => void"
        },
        {
          "name": "render",
          "type": "() => Element"
        }
      ],
      "extends": [
        "Component"
      ]
    }
  ],
  "type": "typeof \"D:/react-uwp/src/Theme/index\""
}