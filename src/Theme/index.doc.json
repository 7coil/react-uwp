{
  "fileName": "D:/react-uwp/src/Theme/index.tsx",
  "name": "\"D:/react-uwp/src/Theme/index\"",
  "exports": [
    {
      "name": "getTheme",
      "documentation": ""
    },
    {
      "name": "DataProps",
      "documentation": ""
    },
    {
      "name": "ThemeProps",
      "documentation": ""
    },
    {
      "name": "ThemeState",
      "documentation": ""
    },
    {
      "name": "Theme",
      "documentation": ""
    },
    {
      "name": "default",
      "documentation": "",
      "extends": [
        "Theme"
      ]
    }
  ],
  "members": [
    {
      "name": "DataProps",
      "members": [
        {
          "name": "theme",
          "documentation": "Set theme object. [ThemeType](https://github.com/myxvisual/react-uwp/blob/master/typings/index.d.ts#L34), Usually use [getTheme](https://github.com/myxvisual/react-uwp/blob/master/src/styles/getTheme.ts#L23) function to get it.",
          "isRequired": false,
          "type": "any"
        },
        {
          "name": "autoSaveTheme",
          "documentation": "For simple development, autoSaveTheme can read and save theme to `localStorage`. use global context `theme.saveTheme` method to save.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "onGeneratedAcrylic",
          "documentation": "onGeneratedAcrylic callback, base acrylic textures is base64 url image, for production, you can set this callback, post image to your server, and update theme(use this callback will not auto update theme).",
          "isRequired": false,
          "type": "(theme?: any) => void"
        },
        {
          "name": "needGenerateAcrylic",
          "documentation": "for production if you have generated acrylic textures, you can disabled generation acrylic textures.",
          "isRequired": false,
          "type": "boolean"
        }
      ],
      "documentation": ""
    },
    {
      "name": "ThemeProps",
      "documentation": "",
      "extends": [
        "DataProps",
        "HTMLAttributes"
      ]
    },
    {
      "name": "ThemeState",
      "members": [
        {
          "name": "currTheme",
          "documentation": "",
          "isRequired": false,
          "type": "any"
        }
      ],
      "documentation": ""
    },
    {
      "documentation": "",
      "name": "customLocalStorageName",
      "type": "\"__REACT_UWP__\"",
      "initializerText": " \"__REACT_UWP__\""
    },
    {
      "name": "customLocalStorageName",
      "documentation": "",
      "type": "\"__REACT_UWP__\""
    },
    {
      "documentation": "",
      "name": "baseClassName",
      "type": "\"react-uwp-theme\"",
      "initializerText": " \"react-uwp-theme\""
    },
    {
      "name": "baseClassName",
      "documentation": "",
      "type": "\"react-uwp-theme\""
    },
    {
      "documentation": "",
      "name": "themeCallback",
      "type": "(theme?: any) => void",
      "initializerText": " () => {}"
    },
    {
      "name": "themeCallback",
      "documentation": "",
      "type": "(theme?: any) => void"
    },
    {
      "name": "Theme",
      "exports": [
        {
          "name": "prototype",
          "documentation": "",
          "type": "prototype"
        },
        {
          "name": "defaultProps",
          "initializerText": " {\n    needGenerateAcrylic: true\n  }",
          "documentation": "",
          "type": "ThemeProps"
        },
        {
          "name": "childContextTypes",
          "initializerText": " {\n    theme: PropTypes.object\n  }",
          "documentation": "",
          "type": "{ theme: Requireable<any>; }"
        }
      ],
      "members": [
        {
          "name": "acrylicTextureCount",
          "initializerText": " 0",
          "documentation": "",
          "type": "number"
        },
        {
          "name": "themeClassName",
          "initializerText": " \"react-uwp-theme-dark\"",
          "documentation": "",
          "type": "string"
        },
        {
          "name": "cacheAcrylicTextures",
          "initializerText": " {}",
          "documentation": "",
          "type": "any"
        },
        {
          "name": "getDefaultTheme",
          "initializerText": " () => {\n    let theme: ReactUWP.ThemeType;\n    let defaultConfig: any = {};\n\n    theme = this.props.theme;\n    if (theme) {\n      Object.assign(defaultConfig, {\n        themeName: theme.themeName,\n        accent: theme.accent,\n        useFluentDesign: theme.useFluentDesign,\n        desktopBackgroundImage: theme.desktopBackgroundImage\n      });\n    }\n\n    if (this.props.autoSaveTheme) {\n      const storageString = localStorage.getItem(customLocalStorageName);\n      if (storageString) {\n        let data: any = {};\n        try {\n          data = JSON.parse(storageString);\n          const { themeName, accent, useFluentDesign, desktopBackgroundImage } = data;\n          theme = getTheme({\n            themeName: themeName === void 0 ? defaultConfig.themeName : themeName,\n            accent: accent === void 0 ? defaultConfig.accent : accent,\n            useFluentDesign: useFluentDesign === void 0 ? defaultConfig.useFluentDesign : useFluentDesign,\n            desktopBackgroundImage: desktopBackgroundImage === void 0 ? defaultConfig.desktopBackgroundImage : desktopBackgroundImage\n          });\n        } catch (error) {\n          theme = this.props.theme || darkTheme;\n        }\n      } else {\n        theme = this.props.theme || darkTheme;\n      }\n    } else {\n      theme = this.props.theme || darkTheme;\n    }\n\n    return theme;\n  }",
          "documentation": "",
          "type": "() => any"
        },
        {
          "name": "state",
          "initializerText": " {\n    currTheme: this.getDefaultTheme()\n  }",
          "documentation": "",
          "type": "ThemeState"
        },
        {
          "name": "getChildContext",
          "documentation": "",
          "type": "() => { theme: any; }"
        },
        {
          "name": "componentDidMount",
          "documentation": "",
          "type": "() => void"
        },
        {
          "name": "componentWillReceiveProps",
          "documentation": "",
          "type": "(nextProps: ThemeProps) => void"
        },
        {
          "name": "componentDidUpdate",
          "documentation": "",
          "type": "() => void"
        },
        {
          "name": "componentWillUnmount",
          "documentation": "",
          "type": "() => void"
        },
        {
          "name": "saveTheme",
          "initializerText": " (newTheme?: ReactUWP.ThemeType, callback = themeCallback) => {\n    localStorage.setItem(customLocalStorageName, JSON.stringify({\n      themeName: newTheme.themeName,\n      accent: newTheme.accent,\n      useFluentDesign: newTheme.useFluentDesign,\n      desktopBackgroundImage: newTheme.desktopBackgroundImage\n    }));\n\n    const needGenerateAcrylic = this.sureNeedGenerateAcrylic(newTheme);\n\n    this.setState({\n      currTheme: newTheme\n    }, () => {\n      callback(newTheme);\n      if (needGenerateAcrylic) {\n        this.generateAcrylicTextures();\n      }\n    });\n  }",
          "documentation": "",
          "type": "(newTheme?: any, callback?: (theme?: any) => void) => void"
        },
        {
          "name": "updateTheme",
          "initializerText": " (newTheme?: ReactUWP.ThemeType, callback = themeCallback) => {\n    const needGenerateAcrylic = this.sureNeedGenerateAcrylic(newTheme);\n\n    this.setState({\n      currTheme: newTheme\n    }, () => {\n      callback(newTheme);\n      if (needGenerateAcrylic) {\n        this.generateAcrylicTextures();\n      }\n    });\n  }",
          "documentation": "",
          "type": "(newTheme?: any, callback?: (theme?: any) => void) => void"
        },
        {
          "name": "sureNeedGenerateAcrylic",
          "initializerText": " (newTheme: ReactUWP.ThemeType): boolean => {\n    const { currTheme } = this.state;\n    let needGenerateAcrylic = newTheme.desktopBackgroundImage && this.props.needGenerateAcrylic;\n\n    if (needGenerateAcrylic &&\n      newTheme.desktopBackgroundImage === currTheme.desktopBackgroundImage &&\n      newTheme.themeName === currTheme.themeName\n    ) {\n      if (currTheme.useFluentDesign && (!newTheme.useFluentDesign)) {\n        Object.assign(this.cacheAcrylicTextures, {\n          acrylicTexture40: currTheme.acrylicTexture40,\n          acrylicTexture60: currTheme.acrylicTexture60,\n          acrylicTexture80: currTheme.acrylicTexture80\n        } as ReactUWP.ThemeType);\n        needGenerateAcrylic = false;\n      } else if (newTheme.useFluentDesign && (!currTheme.useFluentDesign)) {\n        if (this.cacheAcrylicTextures.acrylicTexture40) {\n          Object.assign(newTheme, this.cacheAcrylicTextures);\n          needGenerateAcrylic = false;\n        } else {\n          needGenerateAcrylic = true;\n        }\n      } else {\n        needGenerateAcrylic = false;\n        Object.assign(newTheme, {\n          acrylicTexture40: currTheme.acrylicTexture40,\n          acrylicTexture60: currTheme.acrylicTexture60,\n          acrylicTexture80: currTheme.acrylicTexture80\n        } as ReactUWP.ThemeType);\n      }\n    }\n    needGenerateAcrylic = needGenerateAcrylic && newTheme.useFluentDesign;\n    return needGenerateAcrylic;\n  }",
          "documentation": "",
          "type": "(newTheme: any) => boolean"
        },
        {
          "name": "updateBaseCSS",
          "initializerText": " (init = false) => {\n    const styleSheetClassName = `.${this.themeClassName}-style-sheet`;\n    let styleSheet = document.querySelector(styleSheetClassName);\n    const CSSString = getBaseCSS(this.state.currTheme, this.themeClassName);\n    if (!window.__REACT_UWP__) window.__REACT_UWP__ = {};\n    if (styleSheet || window.__REACT_UWP__.baseCSSRequired) {\n      if (styleSheet) {\n        styleSheet.innerHTML = CSSString;\n      } else return;\n    } else {\n      styleSheet = document.createElement(\"style\");\n      styleSheet.className = styleSheetClassName;\n      styleSheet.innerHTML = CSSString;\n      document.head.appendChild(styleSheet);\n      window.__REACT_UWP__.baseCSSRequired = true;\n    }\n  }",
          "documentation": "",
          "type": "(init?: boolean) => void"
        },
        {
          "name": "generateAcrylicTextures",
          "initializerText": " (generateCallBack?: (theme?: ReactUWP.ThemeType) => void) => {\n    const { currTheme } = this.state;\n    const { onGeneratedAcrylic } = this.props;\n    this.acrylicTextureCount = 0;\n    const baseConfig = {\n      blurSize: 24,\n      noiseSize: 1,\n      noiseOpacity: 0.2\n    };\n    let backgrounds: string[] = [];\n\n    const callback = (image: string, key: number) => {\n      if (key === 4) {\n        this.acrylicTextureCount += 1;\n        currTheme.acrylicTexture40 = {\n          tintColor: currTheme.chromeMediumLow,\n          tintOpacity: 0.4,\n          background: `url(${image}) no-repeat fixed top left / cover`,\n          ...baseConfig\n        };\n      }\n      if (key === 6) {\n        this.acrylicTextureCount += 1;\n        currTheme.acrylicTexture60 = {\n          tintColor: currTheme.chromeLow,\n          tintOpacity: 0.6,\n          background: `url(${image}) no-repeat fixed top left / cover`,\n          ...baseConfig\n        };\n      }\n      if (key === 8) {\n        this.acrylicTextureCount += 1;\n        currTheme.acrylicTexture80 = {\n          tintColor: currTheme.chromeLow,\n          tintOpacity: 0.8,\n          background: `url(${image}) no-repeat fixed top left / cover`,\n          ...baseConfig\n        };\n      }\n\n      if (this.acrylicTextureCount === 3) {\n        if (onGeneratedAcrylic) {\n          onGeneratedAcrylic(currTheme);\n        } else {\n          this.setState({ currTheme });\n        }\n      }\n    };\n\n    generateAcrylicTexture(\n      currTheme.desktopBackgroundImage,\n      currTheme.chromeMediumLow,\n      0.4,\n      void 0,\n      void 0,\n      void 0,\n      image => callback(image, 4)\n    );\n    generateAcrylicTexture(\n      currTheme.desktopBackgroundImage,\n      currTheme.chromeLow,\n      0.6,\n      void 0,\n      void 0,\n      void 0,\n      image => callback(image, 6)\n    );\n    generateAcrylicTexture(\n      currTheme.desktopBackgroundImage,\n      currTheme.chromeLow,\n      0.8,\n      void 0,\n      void 0,\n      void 0,\n      image => callback(image, 8)\n    );\n  }",
          "documentation": "",
          "type": "(generateCallBack?: (theme?: any) => void) => void"
        },
        {
          "name": "handleScrollReveal",
          "initializerText": " (e?: Event) => {\n    if (window.__REACT_UWP__ && window.__REACT_UWP__.scrollReveals) {\n      for (const scrollReveal of window.__REACT_UWP__.scrollReveals) {\n        const {\n          rootElm,\n          animate,\n          animated,\n          initializeAnimation,\n          props: {\n            topOffset,\n            bottomOffset\n          }\n        } = scrollReveal;\n        const { top, height } = rootElm.getBoundingClientRect();\n        const { innerHeight } = window;\n\n        let isIn = false;\n        if (height > innerHeight) {\n          isIn = top < innerHeight - height * height && top > - height * 0.5;\n        } else {\n          isIn = top > 0 + topOffset && top + height + bottomOffset < innerHeight;\n        }\n        if (isIn) {\n          if (!animated) {\n            animate();\n            scrollReveal.animated = true;\n          }\n        } else {\n          if (animated) {\n            initializeAnimation();\n            scrollReveal.animated = false;\n          }\n        }\n      }\n    }\n  }",
          "documentation": "",
          "type": "(e?: Event) => void"
        },
        {
          "name": "cleanLocalStorage",
          "initializerText": " () => {\n    localStorage.setItem(customLocalStorageName, \"\");\n  }",
          "documentation": "",
          "type": "() => void"
        },
        {
          "name": "render",
          "documentation": "",
          "type": "() => Element"
        }
      ],
      "documentation": "",
      "extends": [
        "Component"
      ]
    }
  ],
  "documentation": "",
  "type": "typeof \"D:/react-uwp/src/Theme/index\""
}