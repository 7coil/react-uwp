{
  "fileName": "D:/react-uwp/src/Toast/index.tsx",
  "name": "\"D:/react-uwp/src/Toast/index\"",
  "exports": [
    {
      "name": "DataProps",
      "documentation": ""
    },
    {
      "name": "ToastProps",
      "documentation": ""
    },
    {
      "name": "ToastState",
      "documentation": ""
    },
    {
      "name": "Toast",
      "documentation": ""
    },
    {
      "name": "default",
      "documentation": "",
      "extends": [
        "Toast"
      ]
    }
  ],
  "members": [
    {
      "name": "DataProps",
      "members": [
        {
          "name": "defaultShow",
          "documentation": "Set default show Toast.",
          "isRequired": false,
          "type": "boolean"
        },
        {
          "name": "logoNode",
          "documentation": "Set custom `logo` with `ReactNode`.",
          "isRequired": false,
          "type": "ReactNode"
        },
        {
          "name": "title",
          "documentation": "Set Toast title.",
          "isRequired": false,
          "type": "string"
        },
        {
          "name": "description",
          "documentation": "Set Toast description.",
          "isRequired": false,
          "type": "string | string[]"
        },
        {
          "name": "closeDelay",
          "documentation": "Set Toast close after showed timeout.",
          "isRequired": false,
          "type": "number"
        },
        {
          "name": "onToggleShowToast",
          "documentation": "Set onChange show Toast status `callback`.",
          "isRequired": false,
          "type": "(showToast?: boolean) => void"
        },
        {
          "name": "showCloseIcon",
          "documentation": "Toggle show close `Icon`.",
          "isRequired": false,
          "type": "boolean"
        }
      ],
      "documentation": ""
    },
    {
      "name": "ToastProps",
      "documentation": "",
      "extends": [
        "DataProps",
        "HTMLAttributes"
      ]
    },
    {
      "name": "ToastState",
      "members": [
        {
          "name": "showToast",
          "documentation": "",
          "isRequired": false,
          "type": "boolean"
        }
      ],
      "documentation": ""
    },
    {
      "documentation": "",
      "name": "emptyFunc",
      "type": "() => void",
      "initializerText": " () => {}"
    },
    {
      "name": "emptyFunc",
      "documentation": "",
      "type": "() => void"
    },
    {
      "name": "Toast",
      "exports": [
        {
          "name": "prototype",
          "documentation": "",
          "type": "prototype"
        },
        {
          "name": "defaultProps",
          "initializerText": " {\n    defaultShow: false,\n    onToggleShowToast: emptyFunc,\n    showCloseIcon: false\n  }",
          "documentation": "",
          "type": "ToastProps"
        },
        {
          "name": "contextTypes",
          "initializerText": " { theme: PropTypes.object }",
          "documentation": "",
          "type": "{ theme: Requireable<any>; }"
        }
      ],
      "members": [
        {
          "name": "state",
          "initializerText": " {\n    showToast: this.props.defaultShow\n  }",
          "documentation": "",
          "type": "ToastState"
        },
        {
          "name": "context",
          "documentation": "",
          "type": "{ theme: any; }"
        },
        {
          "name": "toastID",
          "documentation": "",
          "type": "number"
        },
        {
          "name": "hiddenTimer",
          "documentation": "",
          "type": "any"
        },
        {
          "name": "closeTimer",
          "documentation": "",
          "type": "any"
        },
        {
          "name": "customAnimate",
          "documentation": "",
          "type": "any"
        },
        {
          "name": "customAnimateElm",
          "documentation": "",
          "type": "HTMLDivElement"
        },
        {
          "name": "componentWillReceiveProps",
          "documentation": "",
          "type": "(nextProps: ToastProps) => void"
        },
        {
          "name": "componentDidMount",
          "documentation": "",
          "type": "() => void"
        },
        {
          "name": "addCloseDelay",
          "initializerText": " () => {\n    clearTimeout(this.closeTimer);\n    const { closeDelay, onToggleShowToast } = this.props;\n    if (closeDelay === void 0) {\n      return;\n    } else {\n      this.closeTimer = setTimeout(() => {\n        this.setState({ showToast: false });\n        onToggleShowToast(false);\n      }, closeDelay);\n    }\n  }",
          "documentation": "",
          "type": "() => void"
        },
        {
          "name": "componentDidUpdate",
          "documentation": "",
          "type": "() => void"
        },
        {
          "name": "componentWillUnmount",
          "documentation": "",
          "type": "() => void"
        },
        {
          "name": "toggleShowToast",
          "initializerText": " (showToast?: any) => {\n    const { onToggleShowToast } = this.props;\n    if (typeof showToast === \"boolean\") {\n      if (showToast !== this.state.showToast) {\n        this.setState({ showToast });\n        onToggleShowToast(showToast);\n      }\n    } else {\n      this.setState((prevState, prevProps) => {\n        showToast = !prevState.showToast;\n        onToggleShowToast(showToast);\n        return { showToast };\n      });\n    }\n  }",
          "documentation": "",
          "type": "(showToast?: any) => void"
        },
        {
          "name": "trueRender",
          "initializerText": " () => {\n    const {\n      children,\n      defaultShow,\n      logoNode,\n      title,\n      description,\n      onToggleShowToast,\n      closeDelay,\n      showCloseIcon,\n      ...attributes\n    } = this.props;\n    const { theme } = this.context;\n    const styles = getStyles(this);\n\n    return (\n      <CustomAnimate\n        {...slideRightInProps}\n        leaveStyle={slideRightInProps}\n        appearAnimate={false}\n        wrapperStyle={styles.wrapper}\n        ref={customAnimate => this.customAnimate = customAnimate}\n      >\n      <div\n        {...attributes}\n        style={styles.root}\n      >\n        <div style={styles.card}>\n          {logoNode}\n          <span style={styles.descContent}>\n            <p style={styles.title}>{title}</p>\n            {typeof description === \"string\" ? (\n              <p style={styles.description}>{description}</p>\n            ) : (description && description.map((desc, index) => (\n              <p style={styles.description} key={`${index}`}>\n                {desc}\n              </p>\n            )))}\n          </span>\n        </div>\n        {showCloseIcon && (\n          <Icon\n            style={styles.closeIcon}\n            hoverStyle={{ color: theme.baseHigh }}\n            onClick={() => this.toggleShowToast(false)}\n          >\n            ClearLegacy\n          </Icon>\n        )}\n        {children}\n      </div>\n      </CustomAnimate>\n    );\n  }",
          "documentation": "",
          "type": "() => Element"
        },
        {
          "name": "render",
          "documentation": "",
          "type": "() => any"
        }
      ],
      "documentation": "",
      "extends": [
        "Component"
      ]
    },
    {
      "name": "getStyles",
      "documentation": "",
      "type": "(Toast: Toast) => { wrapper?: CSSProperties; root?: CSSProperties; closeIcon?: CSSProperties; car..."
    }
  ],
  "documentation": "",
  "type": "typeof \"D:/react-uwp/src/Toast/index\""
}